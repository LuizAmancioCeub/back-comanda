package com.comandadigital.controllers;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.comandadigital.dtos.ItemRecordDTO;
import com.comandadigital.models.CategoriaModel;
import com.comandadigital.models.ItemModel;
import com.comandadigital.repositories.ItemRepository;
import com.comandadigital.services.CategoriaServiceImplements;
import com.comandadigital.services.ItemServiceImplements;

import jakarta.validation.Valid;

@RestController
public class ItemController {
	@Autowired
	ItemServiceImplements itemServiceImplements;
	@Autowired
	CategoriaServiceImplements categoriaServiceImplements;
	
	// Registrar Item
		@PostMapping("/item")
		public ResponseEntity<ItemModel> saveCategoria(@RequestBody @Valid ItemRecordDTO itemDto){

	        return ResponseEntity.status(HttpStatus.CREATED).body(itemServiceImplements.register(itemDto));
		}
		
		
		// lista dos itens
		@GetMapping("/itens")
		public ResponseEntity<List<ItemModel>> getAllItens(){
					
			// utilizando hateoas para referenciar o produto na lista
			List<ItemModel> itemList = itemServiceImplements.findAll();
					
			if(!itemList.isEmpty()) {
						
				for(ItemModel item : itemList) {
					Integer id = item.getId();
							
					// Adicione um link para acessar as informações detalhadas do produto (self)
					item.add(linkTo(methodOn(ItemController.class).getOneItemId(id)).withSelfRel());
							
					// Adicione um link para a operação de edição do produto
					item.add(linkTo(methodOn(ItemController.class).updateItem(id,null)).withRel("editar_item"));
							
					// Adicione um link para a operação de exclusão do produto
					item.add(linkTo(methodOn(ItemController.class).deleteItem(id)).withRel("deletar_item"));
				}
			}
					
					return ResponseEntity.status(HttpStatus.OK).body(itemList);
		}
		
		// Buscar Item por id
		@GetMapping("/item/{id}")
		public ResponseEntity<Object> getOneItemId(@PathVariable(value="id") Integer id){
			Optional<ItemModel> item0 = itemServiceImplements.findById(id);
			
			if(item0.isEmpty()) {
				 return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Item não encontrada!");
			}
			return ResponseEntity.status(HttpStatus.OK).body(item0.get());
		}
		
	
				
				
				
				
	// Consultar Item por categoria
		@GetMapping("/categoria/{categoriaId}/itens")
		public ResponseEntity<List<ItemModel>> getItensByCategoria(@PathVariable("categoriaId") Integer categoriaId) {
			
			Optional<CategoriaModel> categoria = categoriaServiceImplements.findById(categoriaId);
			
			if (categoria.isEmpty()) {
		        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		    }
			
			List<ItemModel> itens = itemServiceImplements.findItemByCategoria(categoria.get());
			if(!itens.isEmpty()) {
				
				for(ItemModel item : itens) {
					Integer id = item.getId();
					
					// Adicione um link para acessar as informações detalhadas do produto (self)
					item.add(linkTo(methodOn(ItemController.class).getOneItemId(id)).withSelfRel());
					
					// Adicione um link para a operação de edição do produto
					item.add(linkTo(methodOn(ItemController.class).updateItem(id,null)).withRel("editar_item"));
					
					// Adicione um link para a operação de exclusão do produto
					item.add(linkTo(methodOn(ItemController.class).deleteItem(id)).withRel("deletar_item"));
				}
			}

		    return ResponseEntity.status(HttpStatus.OK).body(itens);
		}
		
}
